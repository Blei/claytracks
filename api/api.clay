import maybe.*;
import http.*;
import libxml.*;

private var playtokenUrl = require(parseUrl("http://8tracks.com/sets/new.xml"));

private playUrl(playtoken, mixId) {
    return require(parseUrl("http://8tracks.com/sets/" + playtoken
        + "/play.xml?mix_id=" + mixId));
}

private nextUrl(playtoken, mixId) {
    return require(parseUrl("http://8tracks.com/sets/" + playtoken
        + "/next.xml?mix_id=" + mixId));
}

private skipUrl(playtoken, mixId) {
    return require(parseUrl("http://8tracks.com/sets/" + playtoken
        + "/skip.xml?mix_id=" + mixId));
}

private reportingUrl(mixId, trackId) {
    return require(parseUrl("http://8tracks.com/sets/874076615/report.xml?track_id="
        + trackId + "&mix_id=" + mixId));
}

enum SortMethod ( recent, hot, popular, random );

record MixSearchParameters (
    page: SizeT,
    tagList: Vector[String],
    sortMethod: SortMethod,
);

overload MixSearchParameters() = MixSearchParameters(SizeT(1), Vector[String](), recent);

mixesUrl(parameters) {
    var urlString = "http://8tracks.com/mixes.xml?sort=" + str(parameters.sortMethod);
    if (parameters.page > 1) {
        urlString += "&page=" + str(parameters.page);
    }
    if (size(parameters.tagList) > 0) {
        var tags = join("+", parameters.tagList);
        var encodedTags = uriEncode(tags);
        urlString += "&tag=" + encodedTags;
    }
    return require(parseUrl(urlString));
}

record Mix (
    path: String,
    slug: String,
    name: String,
    tagListCache: Vector[String],
    playsCount: Int,
    description: String,
    id: String,
    originalCoverUrl: String,
    sq133CoverUrl: String
);

record Track (
    releaseName: String,
    name: String,
    performer: String,
    id: String,
    url: String,
);

// hack for relative urls
private fixCoverUrls(mix) {
    ..for (field in #originalCoverUrl, #sq133CoverUrl) {
        var str = fieldRef(mix, field);
        if (not beginsWith?(str, "http://")) {
            fieldRef(mix, field) = "http://8tracks.com" + str;
        }
    }
}

private parseUser(doc, _userNode, mix) {
    // TODO stuff
}

private parseCoverUrls(doc, coverUrlsNode, mix) {
    for (node in XmlNodePtrSequence(coverUrlsNode^.children)) {
        var name = CStringRef(node^.name);
        if (name == "original") {
            mix.originalCoverUrl = nodeListGetString(doc, node^.children);
        } else if (name == "sq133") {
            mix.sq133CoverUrl = nodeListGetString(doc, node^.children);
        }
    }
}

private parseMix(doc, mixNode, mixes) {
    var mix = Mix();
    for (node in XmlNodePtrSequence(mixNode^.children)) {
        var name = CStringRef(node^.name);
        if (name == "path") {
            mix.path = nodeListGetString(doc, node^.children);
        } else if (name == "slug") {
            mix.slug = nodeListGetString(doc, node^.children);
        } else if (name == "name") {
            mix.name = nodeListGetString(doc, node^.children);
        } else if (name == "description") {
            mix.description = nodeListGetString(doc, node^.children);
        } else if (name == "id") {
            mix.id = nodeListGetString(doc, node^.children);
        } else if (name == "plays-count") {
            mix.playsCount = Int(nodeListGetString(doc, node^.children));
        } else if (name == "cover-urls") {
            parseCoverUrls(doc, node, mix);
        } else if (name == "user") {
            parseUser(doc, node, mix);
        } else if (name == "tag-list-cache") {
            var tagString = nodeListGetString(doc, node^.children);
            var tagList = split(tagString, ",");
            for (tag in tagList) {
                push(mix.tagListCache, trim(tag));
            }
        }
    }

    fixCoverUrls(mix);
    push(mixes, mix);
}

private parseMixes(string) {
    var doc = xmlParseDoc(xmlString(string));
    if (null?(doc)) {
        error("parsing of mixes xml document failed");
    }

    var cur = xmlDocGetRootElement(doc);
    if (null?(doc)) {
        error("Empty mixes document");
    }

    if (xmlStrcmp(cur^.name, xmlString("response")) != 0) {
        xmlFreeDoc(doc);
        error("Incorrect mixes document");
    }

    var mixesNode = null(xmlNode);
    for (node in XmlNodePtrSequence(cur^.children)) {
        if (xmlStrcmp(node^.name, xmlString("mixes")) == 0) {
            mixesNode = node;
            break;
        }
    }

    if (null?(mixesNode)) {
        xmlFreeDoc(doc);
        error("document contains no mixes node");
    }

    var mixes = Vector[Mix]();

    for (node in XmlNodePtrSequence(mixesNode^.children)) {
        if (xmlStrcmp(node^.name, xmlString("mix")) == 0) {
            parseMix(doc, node, mixes);
        }
    }

    xmlFreeDoc(doc);
    return move(mixes);
}

getMixes(parameters) {
    var req = GetRequest();
    var sock = sendRequest(req, mixesUrl(parameters));
    var resp = parseResponse(sock, req);
    //println(resp.body);
    return move(parseMixes(resp.body));
}

private maybeFindIf(seq, pred) {
    for (el in seq) {
        if (pred(el))
            return Maybe(el);
    }
    return nothing(SequenceElementType(Type(seq)));
}

private parsePlaytoken(string) {
    var doc = xmlParseDoc(xmlString(string));
    if (null?(doc)) {
        error("Parsing the playtoken document failed");
    }

    var cur = xmlDocGetRootElement(doc);
    if (null?(cur)) {
        error("Empty playtoken document");
    }

    if (xmlStrcmp(cur^.name, xmlString("response")) != 0) {
        error("Incorrect playtoken xml document");
    }

    var maybePlaytokenNode = maybeFindIf(XmlNodePtrSequence(cur^.children)): node ->
        xmlStrcmp(node^.name, xmlString("play-token")) == 0;

    return maybe(maybePlaytokenNode)
        : node -> nodeListGetString(doc, node^.children)
        :: () -> { error("No playtoken in response"); return String(); };
}

getPlaytoken() {
    var req = GetRequest();
    var sock = sendRequest(req, playtokenUrl);
    var resp = parseResponse(sock, req);
    return move(parsePlaytoken(resp.body));
}

private parseTrack(string) {
    var doc = xmlParseDoc(xmlString(string));
    if (null?(doc)) {
        error("Track document parsing failed");
    }

    var cur = xmlDocGetRootElement(doc);
    if (null?(cur)) {
        error("Track document is empty");
    }

    if (xmlStrcmp(cur^.name, xmlString("response")) != 0) {
        error("Track document contains unknown data");
    }

    var setNode = null(xmlNode);
    for (node in XmlNodePtrSequence(cur^.children)) {
        if (xmlStrcmp(node^.name, xmlString("set")) == 0) {
            setNode = node;
            break;
        }
    }

    if (null?(setNode)) {
        return nothing(Track);
    }

    var trackNode = null(xmlNode);
    for (node in XmlNodePtrSequence(setNode^.children)) {
        if (xmlStrcmp(node^.name, xmlString("track")) == 0) {
            trackNode = node;
            break;
        } else if (xmlStrcmp(node^.name, xmlString("at-end")) == 0) {
            var atEndStr = nodeListGetString(doc, node^.children);
            if (trim(atEndStr) == "true") {
                printlnTo(stderr, "At the end of playlist");
                return nothing(Track);
            }
        }
    }

    if (null?(trackNode)) {
        return nothing(Track);
    }

    var track = Track();

    for (node in XmlNodePtrSequence(trackNode^.children)) {
        var name = String(node^.name);
        if (name == "release-name") {
            track.releaseName = nodeListGetString(doc, node^.children);
        } else if (name == "name") {
            track.name = nodeListGetString(doc, node^.children);
        } else if (name == "performer") {
            track.performer = nodeListGetString(doc, node^.children);
        } else if (name == "id") {
            track.id = nodeListGetString(doc, node^.children);
        } else if (name == "url") {
            track.url = nodeListGetString(doc, node^.children);
        }
    }

    // Sanity check?
    if (track.name == "") {
        printlnTo(stderr, "Sanity check -- track has empty name. Generated from:");
        printlnTo(stderr, string);
    }

    return move(Maybe(track));
}

getTrack(playtoken, mix) {
    var req = GetRequest();
    var url = playUrl(playtoken, mix.id);
    printlnTo(stderr, url.path);
    var sock = sendRequest(req, url);
    var resp = parseResponse(sock, req);
    return move(parseTrack(resp.body));
}

getNextTrack(playtoken, mix) {
    var req = GetRequest();
    var url = nextUrl(playtoken, mix.id);
    printlnTo(stderr, url.path);
    var sock = sendRequest(req, url);
    var resp = parseResponse(sock, req);
    return move(parseTrack(resp.body));
}

reportTrack(mix, track) {
    var req = GetRequest();
    var url = reportingUrl(mix.id, track.id);
    printlnTo(stderr, url.path);
    var sock = sendRequest(req, url);
    var resp = parseResponse(sock, req);
    // TODO check response
}

skipTrack(playtoken, mix) {
    var req = GetRequest();
    var url = skipUrl(playtoken, mix.id);
    printlnTo(stderr, url.path);
    var sock = sendRequest(req, url);
    var resp = parseResponse(sock, req);
    // XXX: check for errors (?) look at skip protocol
    return move(parseTrack(resp.body));
}
