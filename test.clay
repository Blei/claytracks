import http.*;
import maybe.*;
import gstreamer.*;
import glib.*;
import gio.*;
import gobject.*;
import gtk.*;
import gdkpixbuf.*;
import io.paths.*;

import api.*;
import parallel.*;
import io.filesystem.utils.*;

private var nothingPlayingText = cstring("Nothing playing currently");
private var playButtonText = cstring("Play");
private var pauseButtonText = cstring("Pause");

private var playbin = Pointer[GstElement](0);
private var playtoken = String();

private var currentTrack = nothing(Track);
private var currentMix = nothing(Mix);

private var currentTrackLabel = null(GtkLabel);
private var currentlyPlaying? = false;

private var currentClockId = nothing(GstClockID);
private var songReporterRegistered? = false;
private var songReported? = false;

private var playPauseButton = null(GtkButton);
private var skipButton = null(GtkButton);

private var currentMixList = Vector[Mix]();
private var mixListBox = null(GtkBox);

private var scrolledWindow = null(GtkScrolledWindow);

private var mixSearchParameters = MixSearchParameters();

private external watchBus(bus: Pointer[GstBus], message: Pointer[GstMessage], data: gpointer) : gboolean {

    var msgType = message^.type;

    switch (msgType)
    case (GST_MESSAGE_STATE_CHANGED) {
        var oldState = GstState(0);
        var newState = GstState(0);
        var pendingState = GstState(0);
        gst_message_parse_state_changed(message, &oldState, &newState, &pendingState);

        //var newStateName = gst_element_state_get_name(newState);
        //println("Changed state to ", CStringRef(newStateName));

        if (newState == GST_STATE_PLAYING and not songReporterRegistered?) {
            registerSongReporter();
        }
    }
    case (GST_MESSAGE_ERROR) {
        var err = null(GError);
        var debugInfo = null(gchar);
        gst_message_parse_error(message, &err, &debugInfo);
        println("Error: ", String(err^.message));
        println("debug info: ", String(debugInfo));
        g_error_free(err);
        g_free(gpointer(debugInfo));
        currentlyPlaying? = false;
    }
    case (GST_MESSAGE_EOS) {
        var mix = require(currentMix);
        var maybeTrack = getNextTrack(playtoken, mix);
        changeTrack(maybeTrack);
    }
    else {
        //println(String(gst_message_type_get_name(msgType)));
    }

    return TRUE;
}

private external destroying(widget: Pointer[GtkWidget], data: gpointer) {
    gtk_main_quit();
}

private external clickedPlay(button: Pointer[GtkButton], data: gpointer) {
    var mix = Pointer[Mix](data);
    currentMix = Maybe(mix^);
    var maybeTrack = getTrack(playtoken, mix^);
    changeTrack(maybeTrack);
}

private external clickedPlayPause(button: Pointer[GtkButton], data: gpointer) {
    togglePlaying();
}

private external clickedSkip(button: Pointer[GtkButton], data: gpointer) {
    if (currentlyPlaying?) {
        // Pause current track
        gst_element_set_state(playbin, GST_STATE_PAUSED);
        currentlyPlaying? = false;
    }

    var mix = require(currentMix);
    // TODO is skipping allowed?
    var maybeTrack = skipTrack(playtoken, mix);
    // TODO show indication if skipping fails
    changeTrack(maybeTrack);
}

private external destroyWidget(widget: Pointer[GtkWidget], data: gpointer) {
    gtk_widget_destroy(widget);
}

private external clickedReload(button: Pointer[GtkButton], data: gpointer) {
    setCurrentMixes(getMixes(mixSearchParameters));
}

private external clickedPreviousPage(button: Pointer[GtkButton], data: gpointer) {
    if (mixSearchParameters.page > 1) {
        mixSearchParameters.page -= 1;
        setCurrentMixes(getMixes(mixSearchParameters));
        scrollUp();
    }
}

private external clickedNextPage(button: Pointer[GtkButton], data: gpointer) {
    mixSearchParameters.page += 1;
    setCurrentMixes(getMixes(mixSearchParameters));
    scrollUp();
}

private external registerPlayingSong(clock: Pointer[GstClock], time: GstClockTime,
        id: GstClockID, data: gpointer) : gboolean {

    println("Reporting track");
    reportTrack(require(currentMix), require(currentTrack));
    songReported? = true;

    gst_clock_id_unref(id);
    currentClockId = nothing(GstClockID);

    // return value is ignored, according to docs
    return TRUE;
}

private registerSongReporter() {
    var clock = gst_element_get_clock(playbin);
    if (null?(clock)) {
        printlnTo(stderr, "clock is null");
        return;
    }
    println("Registering Song Reporter");
    var baseTime = gst_element_get_base_time(playbin);
    var clockId = gst_clock_new_single_shot_id(clock, baseTime + GST_SECOND * 30);
    gst_clock_id_wait_async(clockId, GstClockCallback(registerPlayingSong), gpointer(0));

    currentClockId = Maybe(clockId);

    g_object_unref(gpointer(clock));

    songReporterRegistered? = true;
    songReported? = false;
}

private changeTrack(maybeTrack) {
    currentTrack = maybeTrack;
    maybe(maybeTrack) : track -> {
        // Stop left-over song reporter
        if (songReporterRegistered? and not songReported?) {
            gst_clock_id_unschedule(require(currentClockId));
            currentClockId = nothing(GstClockID);
        }

        println("Current track: ", track);
        gtk_label_set_text(currentTrackLabel,
            cstring("'" ++ track.name ++ "' by " ++ track.performer));

        gst_element_set_state(playbin, GST_STATE_NULL);
        g_object_set(gpointer(playbin), cstring("uri"), cstring(track.url), 0);
        gst_element_set_state(playbin, GST_STATE_PLAYING);
        currentlyPlaying? = true;
        songReporterRegistered? = false;
        songReported? = false;
        setControlButtonsSensitive(true);
    } :: () -> {
        println("No current track (end of playlist?)");
        gtk_label_set_text(currentTrackLabel, nothingPlayingText);
        currentlyPlaying? = false;
        setControlButtonsSensitive(false);
    }
}

private togglePlaying() {
    gst_element_set_state(playbin, if (currentlyPlaying?) GST_STATE_PAUSED else GST_STATE_PLAYING);
    gtk_button_set_label(playPauseButton, if (currentlyPlaying?) pauseButtonText else playButtonText);
    currentlyPlaying? = not currentlyPlaying?;
}

private getMixImage(mix) {
    var url = require(parseUrl(mix.sq133CoverUrl));
    var req = GetRequest();
    var sock = sendRequest(req, url);
    var resp = parseResponse(sock, req);

    var memoryStream = g_memory_input_stream_new_from_data(
        gpointer(cstring(resp.body)),
        Int64(size(resp.body)), GDestroyNotify(0));

    var error = Pointer[GError](0);
    var image = gdk_pixbuf_new_from_stream(memoryStream, null(GCancellable), &error);
    if (not null?(error)) {
        println("error creating pixbuf ", String(error^.message));
        return null(GdkPixbuf);
    } else {
        return image;
    }
}

private getMixImages(mixes) {
    var images = Vector[Pointer[GdkPixbuf]]();
    resize(images, size(mixes));
    parallelMap(mixes, images) : mix -> getMixImage(mix);
    return move(images);
}

private addMixToContainer(mix, image, container) {
    var hbox = gtk_hbox_new(FALSE, 5);
    gtk_container_add(Pointer[GtkContainer](container), Pointer[GtkWidget](hbox));

    /*
    var alignment = gtk_alignment_new(0.5f, 0.5f, 0f, 0f);
    gtk_box_pack_start(Pointer[GtkBox](hbox), alignment, TRUE, TRUE, 0u);
    */

    var labelsBox = gtk_vbox_new(FALSE, 1);
    gtk_box_pack_start(Pointer[GtkBox](hbox), labelsBox, TRUE, FALSE, 0u);

    var nameLabel = gtk_label_new(cstring(mix.name));
    gtk_box_pack_start(Pointer[GtkBox](labelsBox), nameLabel, TRUE, FALSE, 0u);

    var tagsString = "Tags: " ++ join(String(", "), mix.tagListCache);
    var tagsLabel = gtk_label_new(cstring(tagsString));
    gtk_box_pack_end(Pointer[GtkBox](labelsBox), tagsLabel, TRUE, FALSE, 0u);

    ..for (label in nameLabel, tagsLabel) {
        //gtk_container_add(Pointer[GtkContainer](alignment), label);
        gtk_widget_set_size_request(label, 300, -1);
        gtk_label_set_justify(Pointer[GtkLabel](label), GTK_JUSTIFY_CENTER);
        gtk_misc_set_alignment(Pointer[GtkMisc](label), 0.5f, 0.5f);
        gtk_label_set_line_wrap(Pointer[GtkLabel](label), TRUE);
    }

    if (not null?(image)) {
        var imageWidget = gtk_image_new_from_pixbuf(image);
        gtk_box_pack_end(Pointer[GtkBox](hbox), Pointer[GtkWidget](imageWidget),
            FALSE, FALSE, UInt32(0));
    }

    var button = gtk_button_new_with_label(playButtonText);
    gtk_box_pack_end(Pointer[GtkBox](hbox), Pointer[GtkWidget](button),
        FALSE, FALSE, UInt32(0));

    gSignalConnect(button, cstring("clicked"),
        GCallback(clickedPlay), gpointer(&mix));
}

private setCurrentMixes(mixes) {
    // Remove old mixes
    gtk_container_foreach(Pointer[GtkContainer](mixListBox),
        GtkCallback(destroyWidget), gpointer(0));

    currentMixList = mixes;
    var images = getMixImages(currentMixList);
    for (i in range(size(currentMixList))) {
        addMixToContainer(currentMixList[i], images[i], mixListBox);
    }

    gtk_widget_show_all(Pointer[GtkWidget](mixListBox));
}

private setControlButtonsSensitive(sensitive?) {
    ..for (button in playPauseButton, skipButton) {
        gtk_widget_set_sensitive(Pointer[GtkWidget](button), if (sensitive?) TRUE else FALSE);
    }
}

private scrollUp() {
    var adjustment = gtk_scrolled_window_get_vadjustment(scrolledWindow);
    gtk_adjustment_set_value(adjustment, gtk_adjustment_get_lower(adjustment));
    gtk_scrolled_window_set_vadjustment(scrolledWindow, adjustment);
}

private initGstreamer(argcPointer, argvPointer) {
    // let's get some sound going on!
    gst_init(argcPointer, argvPointer);

    playbin = gst_element_factory_make(cstring("playbin2"), cstring("play"));

    var bus = gst_element_get_bus(playbin);
    gst_bus_add_watch(bus, GstBusFunc(watchBus), gpointer(0));
    gst_object_unref(gpointer(bus));
}

main(argc, argv) {
    playtoken = getPlaytoken();

    initGstreamer(&argc, &argv);
    
    // gui ftw
    gtk_init(&argc, &argv);

    var window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(Pointer[GtkWindow](window), cstring("Cl8tracks"));
    gtk_window_set_default_size(Pointer[GtkWindow](window), 500, 600);
    gSignalConnect(window, cstring("destroy"),
        GCallback(destroying), gpointer(0));

    var windowBox = gtk_vbox_new(FALSE, 5);
    gtk_container_add(Pointer[GtkContainer](window), Pointer[GtkWidget](windowBox));

    var controlButtonBox = gtk_hbutton_box_new();
    gtk_box_pack_start(Pointer[GtkBox](windowBox), Pointer[GtkWidget](controlButtonBox),
        FALSE, FALSE, 0u);
    gtk_button_box_set_layout(Pointer[GtkButtonBox](controlButtonBox), GTK_BUTTONBOX_CENTER);

    playPauseButton = Pointer[GtkButton](gtk_button_new_with_label(pauseButtonText));
    gtk_container_add(Pointer[GtkContainer](controlButtonBox), Pointer[GtkWidget](playPauseButton));
    gSignalConnect(playPauseButton, cstring("clicked"),
        GCallback(clickedPlayPause), gpointer(0));

    skipButton = Pointer[GtkButton](gtk_button_new_with_label(cstring("Skip")));
    gtk_container_add(Pointer[GtkContainer](controlButtonBox), Pointer[GtkWidget](skipButton));
    gSignalConnect(skipButton, cstring("clicked"),
        GCallback(clickedSkip), gpointer(0));

    setControlButtonsSensitive(false);

    // whu? that's definitely a label
    currentTrackLabel = Pointer[GtkLabel](gtk_label_new(nothingPlayingText));
    gtk_box_pack_start(Pointer[GtkBox](windowBox), Pointer[GtkWidget](currentTrackLabel),
        FALSE, FALSE, 0u);

    scrolledWindow = Pointer[GtkScrolledWindow](
        gtk_scrolled_window_new(null(GtkAdjustment), null(GtkAdjustment)));
    gtk_scrolled_window_set_policy(scrolledWindow, GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
    gtk_box_pack_start_defaults(Pointer[GtkBox](windowBox), Pointer[GtkWidget](scrolledWindow));

    mixListBox = Pointer[GtkBox](gtk_vbox_new(FALSE, 5));
    gtk_scrolled_window_add_with_viewport(
        Pointer[GtkScrolledWindow](scrolledWindow), Pointer[GtkWidget](mixListBox));

    setCurrentMixes(getMixes(mixSearchParameters));

    var pageBox = gtk_hbox_new(FALSE, 10);
    gtk_box_pack_start(Pointer[GtkBox](windowBox), Pointer[GtkWidget](pageBox),
        FALSE, FALSE, 0u);

    var previousPageButton = gtk_button_new_with_label(cstring("Previous Page"));
    gtk_box_pack_start(Pointer[GtkBox](pageBox), Pointer[GtkWidget](previousPageButton),
        FALSE, FALSE, 0u);
    gSignalConnect(previousPageButton, cstring("clicked"),
        GCallback(clickedPreviousPage), gpointer(0));

    var reloadButton = gtk_button_new_with_label(cstring("Reload List"));
    gtk_box_pack_start(Pointer[GtkBox](pageBox), Pointer[GtkWidget](reloadButton),
        TRUE, FALSE, 0u);
    gSignalConnect(reloadButton, cstring("clicked"),
        GCallback(clickedReload), gpointer(0));

    var nextPageButton = gtk_button_new_with_label(cstring("Next Page"));
    gtk_box_pack_end(Pointer[GtkBox](pageBox), Pointer[GtkWidget](nextPageButton),
        FALSE, FALSE, 0u);
    gSignalConnect(nextPageButton, cstring("clicked"),
        GCallback(clickedNextPage), gpointer(0));

    gtk_widget_show_all(Pointer[GtkWidget](window));

    gtk_main();

    // cleanup
    gst_element_set_state(playbin, GST_STATE_NULL);
    gst_object_unref(gpointer(playbin));
}
