import unix.*;
import unix.utility.*;

private getNumberOfCpus() {
    return SizeT(sysconf(_SC_NPROCESSORS_ONLN));
}

// TODO this should be in unix
alias PTHREAD_CANCELED = RawPointer(-1);

private record ParallelForInfo (
    callback : Lambda[[SizeT], []],
    index : SizeT,
    end : SizeT,
);

private external parallelEachNumberCallback(data: RawPointer) : RawPointer {
    var info = Pointer[ParallelForInfo](data);
    var index = info^.index;
    while (index < info^.end) {
        var old = atomicCompareExchange(OrderSeqCst, &info^.index, index, index + 1);
        if (index == old) {
            info^.callback(index);
        }
        index = info^.index;
    }
    return RawPointer(0);
}

parallelEachNumber(numCalls: SizeT, callback) {
    var numCpus = getNumberOfCpus();
    parallelEachNumber(numCalls, numCpus, callback);
}

overload parallelEachNumber(numCalls: SizeT, nThreads: SizeT, callback) {
    if (numCalls == 0) {
        return;
    }

    var info = ParallelForInfo(Lambda[[SizeT], []](callback), SizeT(0), numCalls);

    var threadIds = Vector[pthread_t]();
    resize(threadIds, nThreads);

    var attr = pthread_attr_t();
    ensureSyscall(pthread_attr_init(&attr));

    for (i in range(nThreads)) {
        ensureSyscall(pthread_create(&threadIds[i], &attr, parallelEachNumberCallback, RawPointer(&info)));
    }

    ensureSyscall(pthread_attr_destroy(&attr));

    for (i in range(nThreads)) {
        var threadResult = RawPointer();
        ensureSyscall(pthread_join(threadIds[i], &threadResult));
        if (not null?(threadResult) and threadResult != PTHREAD_CANCELED) {
            free(threadResult);
        }
    }

    assert(info.index == info.end);
}

[S1, S2, C]
inline parallelMap(inseq: S1, outseq: S2, numThreads: SizeT, callback: C) {
    assert(size(inseq) == size(outseq));
    parallelEachNumber(size(inseq), numThreads) : (i) -> {
        outseq[i] = callback(inseq[i]);
    }
}

[S1, S2, C]
inline overload parallelMap(inseq: S1, outseq: S2, callback: C) {
    var numCpus = getNumberOfCpus();
    parallelMap(inseq, outseq, numCpus, callback);
}

[S, C]
inline parallelMapHere(seq: S, numThreads: SizeT, callback: C) {
    parallelMap(seq, seq, numThreads, callback);
}

[S, C]
inline overload parallelMapHere(seq: S, callback: C) {
    parallelMap(seq, seq, callback);
}

private external spawnCallback(data: RawPointer) : RawPointer {
    var callback = Pointer[Lambda[[], []]](data);
    finally freeObject(callback);

    callback^();

    return RawPointer(0);
}

[C]
spawn(callback: C) {
    var lambdaPtr = allocateObject(Lambda[[], []](callback));

    var attr = pthread_attr_t();
    ensureSyscall(pthread_attr_init(&attr));
    ensureSyscall(pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED));

    var threadId = pthread_t();
    ensureSyscall(pthread_create(&threadId, &attr, spawnCallback, RawPointer(lambdaPtr)));

    ensureSyscall(pthread_attr_destroy(&attr));
    return threadId;
}
